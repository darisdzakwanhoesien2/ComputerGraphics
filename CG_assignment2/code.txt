# CG_assignment2.py
from OpenGL.GL import *
import glm
from utils.obj_loader import ObjLoader
from utils.texture_loader import TextureLoader
from utils.glut_window import GlutWindow
from utils.mvp_controller import MVPController
from OpenGL.GL import shaders


# Define our object (Texture-mapped 2x2x2 cube centered at origin).
# 
# Because we need different texture coordinates (and normal coordinates for lighting calculations), we need to define different vertices
# for all the different parameter combinations even when position coordinates for the same vertex are the same. If _all_ the used vertex
# properties (position, normal, texture coordinates, vertex color, ...) are the same, we can reuse the same index value! This happens
# in this example when we define triangles that form each side of the cube.
#
# All the triangles should be defined in counter-clockwise orientation!!
#

'''
1. fill here your code to draw the cube with 12 pieces of triangles
'''
#     Vertex names for our cube
#            v8      v7
#            *------*     y
#           /|     /|     ^
#        v4/ |  v3/ |     |
#         *--*---*--*v6   +--->x
#         | /v5  | /     /
#         |/     |/     z
#         *------*
#        v1      v2
#

#-1.0,-1.0, 1.0, #v1
# 1.0,-1.0, 1.0, #v2
# 1.0, 1.0, 1.0, #v3
#-1.0, 1.0, 1.0, #v4
#-1.0,-1.0,-1.0, #v5
# 1.0,-1.0,-1.0, #v6
# 1.0, 1.0,-1.0, #v7
#-1.0, 1.0,-1.0, #v8


vertex_buffer_data = [
                #Front side
                #draw the triangle 1 for front side, v1, v2, v3
                -1.0,-1.0, 1.0, #v1
                 1.0,-1.0, 1.0, #v2
                 1.0, 1.0, 1.0, #v3
                #draw the triangle 2 of front side, v3, v4, v1
                1.0,  1.0,  1.0,  # v3
                -1.0,  1.0,  1.0,  # v4
                -1.0, -1.0,  1.0,  # v1
                
                #Right side
                #draw the triangle 3 of right side, v2, v6, v7
                1.0, -1.0,  1.0,  # v2
                1.0, -1.0, -1.0,  # v6
                1.0,  1.0, -1.0,  # v7
                #draw the triangle 4 of right side, v7, v3, v2
                1.0,  1.0, -1.0,  # v7
                1.0,  1.0,  1.0,  # v3
                1.0, -1.0,  1.0,  # v2

                #Bottom side
                #draw the triangle 5 of bottom side, v1, v6, v2
                -1.0, -1.0,  1.0,  # v1
                1.0, -1.0, -1.0,  # v6
                1.0, -1.0,  1.0,  # v2
                #draw the triangle 6 of bottom side, v6, v1, v5
                1.0, -1.0, -1.0,  # v6
                -1.0, -1.0,  1.0,  # v1
                -1.0, -1.0, -1.0,  # v5
                
                #Top side
                #draw the triangle 7 of top side, v4, v3, v7
                -1.0,  1.0,  1.0,  # v4
                1.0,  1.0,  1.0,  # v3
                1.0,  1.0, -1.0,  # v7
                #draw the triangle 8 of top side, v7, v8, v4
                1.0,  1.0, -1.0,  # v7
                -1.0,  1.0, -1.0,  # v8
                -1.0,  1.0,  1.0,  # v4
                
                #Left side
                #draw the triangle 9 of left side, v5, v1, v4
                -1.0, -1.0, -1.0,  # v5
                -1.0, -1.0,  1.0,  # v1
                -1.0,  1.0,  1.0,  # v4
                #draw the triangle 10 of left side, v4, v8, v5
                -1.0,  1.0,  1.0,  # v4
                -1.0,  1.0, -1.0,  # v8
                -1.0, -1.0, -1.0,  # v5
                
                #Back side
                #draw the triangle 11 of back side, v6, v5, v8
                1.0, -1.0, -1.0,  # v6
                -1.0, -1.0, -1.0,  # v5
                -1.0,  1.0, -1.0,  # v8

                #draw the triangle 12 of back side, v8, v7, v6
                -1.0,  1.0, -1.0,  # v8
                1.0,  1.0, -1.0,  # v7
                1.0, -1.0, -1.0,  # v6
]        


                 
# Texture coordinates with labeled sides      Vertex names for our cube
#                                                   v8      v7
#  3/3+---+---+---+         v                         *------*     y
#     | 1 | 2 | 3 |        ^                         /|     /|     ^
#  2/3+---+---+---+        |                     v4/ |  v3/ |     |
#     | 4 | 5 | 6 |        +--->u                 *--*---*--*v6   +--->x
#  1/3+---+---+---+                               | /v5  | /     /
#     |   |   |   |                               |/     |/     z
#    0+---+---+---+                               *------*
#     0  1/3 2/3 3/3                             v1      v2
#

# After we have defined each side, we also define vertex index values that are used for actual triangles that are drawn.


'''
2. fill here your code to map the texture to the cube with 12 pieces of triangles
'''
                
uv_buffer_data = [
                
                #Front side with texutre number 1
                #map the texture to the triangle 1 of side, v1, v2, v3 (different from the initial templates)
                0.0, 0.0,  # v1 maps to bottom-left of the texture
                1.0, 0.0,  # v2 maps to bottom-right
                1.0, 1.0,  # v3 maps to top-right

                #map the texture to the triangle 2 of side, v3, v4, v1
                1.0, 1.0,  # v3
                0.0, 1.0,  # v4
                0.0, 0.0,  # v1
                
                #Right side with texutre number 2
                #map the texture to the triangle 1 of side, v2, v6, v7
                0.0, 0.0,  # v2
                1.0, 0.0,  # v6
                1.0, 1.0,  # v7

                #map the texture to the triangle 2 of side, v7, v3, v2
                1.0, 1.0,  # v7
                0.0, 1.0,  # v3
                0.0, 0.0,  # v2
                
                #Bottom side with texutre number 3
                #map the texture to the triangle 1 of side, v1, v6, v2
                0.0, 0.0,  # v1
                1.0, 0.0,  # v6
                1.0, 1.0,  # v2

                #map the texture to the triangle 2 of side, v6, v1, v5
                1.0, 0.0,  # v6
                0.0, 0.0,  # v1
                0.0, 1.0,  # v5
                
                #Top side with texutre number 4
                #map the texture to the triangle 1 of side, v4, v3, v7
                0.0, 1.0,  # v4
                1.0, 1.0,  # v3
                1.0, 0.0,  # v7

                #map the texture to the triangle 2 of side, v7, v8, v4
                1.0, 0.0,  # v7
                0.0, 0.0,  # v8
                0.0, 1.0,  # v4
                
                #Let side with texutre number 5
                #map the texture to the triangle 1 of side, v5, v1, v4
                0.0, 0.0,  # v5
                1.0, 0.0,  # v1
                1.0, 1.0,  # v4

                #map the texture to the triangle 2 of side, v4, v8, v5
                1.0, 1.0,  # v4
                0.0, 1.0,  # v8
                0.0, 0.0,  # v5
                
                #Back side with texutre number 6
                #map the texture to the triangle 1 of side, v6, v5, v8
                0.0, 0.0,  # v6
                1.0, 0.0,  # v5
                1.0, 1.0,  # v8

                #map the texture to the triangle 2 of side, v8, v7, v6
                1.0, 1.0,  # v8
                0.0, 1.0,  # v7
                0.0, 0.0,  # v6
]

def read_file(file_path: str) -> str:
        """Reads a text file given a path and returns it as a string."""
        with open(file_path, mode="r") as f:
                contents = f.readlines()
        return contents


class GLContext:
        """Used for storing context data in the main window."""
        pass


class Win(GlutWindow):
        def __init__(self, width: int = 800, height: int = 480):
                super().__init__(width, height)
                self.context = GLContext()

        def init_shaders(self):
                vertex_shader_string = read_file("resources/vertex_shader.glsl")
                fragment_shader_string = read_file("resources/fragment_shader.glsl")
                vertex_shader = shaders.compileShader(vertex_shader_string, GL_VERTEX_SHADER)
                fragment_shader = shaders.compileShader(
                        fragment_shader_string, GL_FRAGMENT_SHADER
                )
                shader_program = shaders.compileProgram(vertex_shader, fragment_shader)
                return shader_program

        def init_context_raw(self):
                self.shader_program = self.init_shaders()

                self.context.mvp_location = glGetUniformLocation(self.shader_program, "mvp")
                self.context.texture_location = glGetUniformLocation(self.shader_program,
                                                                     "texture_sampler")

                texture = TextureLoader("resources/uvtemplate.png")
                
                self.context.textureGLID = texture.textureGLID

                self.context.vertexbuffer  = glGenBuffers(1)
                glBindBuffer(GL_ARRAY_BUFFER, self.context.vertexbuffer)
                glBufferData(
                        GL_ARRAY_BUFFER,
                        len(vertex_buffer_data) * 4,
                        (GLfloat * len(vertex_buffer_data))(*vertex_buffer_data),
                        GL_STATIC_DRAW
                )

                if texture.inversedVCoords:
                        for index in range(len(uv_buffer_data)):
                                if(index % 2):
                                        uv_buffer_data[index] = 1.0 - uv_buffer_data[index]

                '''
		3. fill here your code to define data buffer for storing the
		cube's texture (uv).
		'''
                self.context.uvbuffer = glGenBuffers(1)
                glBindBuffer(GL_ARRAY_BUFFER, self.context.uvbuffer)
                glBufferData(
                        GL_ARRAY_BUFFER,
                        len(uv_buffer_data) * 4,
                        (GLfloat * len(uv_buffer_data))(*uv_buffer_data),
                        GL_STATIC_DRAW
                )                
                
        def init_context_load(self):
                '''
		4. fill here your code to complete the init_context_load function to
		load an external object instead of drawing one with raw triangle.
		'''
                self.shader_program = self.init_shaders()

                self.context.mvp_location = glGetUniformLocation(self.shader_program, "mvp")
                self.context.texture_location = glGetUniformLocation(self.shader_program, "texture_sampler")

                # Load texture
                texture = TextureLoader("resources/uvtemplate.png")
                self.context.textureGLID = texture.textureGLID

                # --- ✅ Load external object using ObjLoader ---
                obj = ObjLoader("resources/cube.obj")
                obj.load_model()  # This should populate obj.vertices and obj.uvs

                # Create buffer for vertex positions
                self.context.vertexbuffer = glGenBuffers(1)
                glBindBuffer(GL_ARRAY_BUFFER, self.context.vertexbuffer)
                glBufferData(
                        GL_ARRAY_BUFFER,
                        len(obj.vertices) * 4,
                        (GLfloat * len(obj.vertices))(*obj.vertices),
                        GL_STATIC_DRAW
                )

                # Create buffer for texture UVs
                self.context.uvbuffer = glGenBuffers(1)
                glBindBuffer(GL_ARRAY_BUFFER, self.context.uvbuffer)
                glBufferData(
                        GL_ARRAY_BUFFER,
                        len(obj.uvs) * 4,
                        (GLfloat * len(obj.uvs))(*obj.uvs),
                        GL_STATIC_DRAW
                )

                # Save how many vertices to draw
                self.context.vertex_count = int(len(obj.vertices) / 3)

                

        def calc_mvp(self):
                self.calc_model()
                self.context.mvp = self.controller.calc_mvp(self.model_matrix)
                
        def resize(self, width, height):
                glViewport(0, 0, width, height)
                self.calc_mvp()

        def calc_model(self):
                self.model_matrix = glm.mat4(1)

        def draw(self):
                """
                The main drawing function. Is called whenever an update occurs.
                """
                glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
                self.calc_mvp()
                glUseProgram(self.shader_program)
                glUniformMatrix4fv(
                        self.context.mvp_location,
                        1,
                        GL_FALSE,
                        glm.value_ptr(self.context.mvp))

                glActiveTexture(GL_TEXTURE0)
                glBindTexture(GL_TEXTURE_2D, self.context.textureGLID)
                glUniform1i(self.context.texture_location, 0)

                glEnableVertexAttribArray(0)
                glBindBuffer(GL_ARRAY_BUFFER, self.context.vertexbuffer)
                glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, None)
                '''
		3. fill here your code to to enable and bind the texture buffer.
		'''
                glEnableVertexAttribArray(1)
                glBindBuffer(GL_ARRAY_BUFFER, self.context.uvbuffer)
                glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 0, None)

                # Draw the object: glDrawArrays(GL_TRIANGLES, 0, int(len(vertex_buffer_data) / 3))
                vertex_count = getattr(self.context, 'vertex_count', int(len(vertex_buffer_data) / 3))
                glDrawArrays(GL_TRIANGLES, 0, vertex_count)

                glDisableVertexAttribArray(0)
                glDisableVertexAttribArray(1)
                glUseProgram(0)
        

if __name__ == "__main__":
        win = Win()
        win.controller = MVPController(win.update_if, width=win.width, height=win.height)
        win.init_opengl()
        
        #win.init_context_load()
        win.init_context_raw()
        win.run()


# data.py
from pathlib import Path
import json

def extract_content_from_ipynb(file_path: Path) -> str:
    """
    Extracts and concatenates the content of a Jupyter Notebook (.ipynb) file.
    Both code cells and markdown cells are extracted, preserving the order.
    Each cell is annotated with a header indicating its type.
    """
    try:
        notebook = json.loads(file_path.read_text(encoding="utf-8"))
        cells = notebook.get("cells", [])
        content_lines = []
        for idx, cell in enumerate(cells, start=1):
            cell_type = cell.get("cell_type", "unknown")
            # Add a header for this cell
            if cell_type == "code":
                content_lines.append(f"### Cell {idx}: Code")
            elif cell_type == "markdown":
                content_lines.append(f"### Cell {idx}: Markdown")
            else:
                content_lines.append(f"### Cell {idx}: {cell_type}")
            # Join the source lines; they are typically stored as a list of lines.
            source = "".join(cell.get("source", []))
            content_lines.append(source)
            content_lines.append("\n")  # Extra newline after each cell
        return "\n".join(content_lines)
    except Exception as e:
        return f"# Error reading {file_path}: {e}"

def export_code_and_directory_list(root_directory=".", code_file="code.txt", list_file="directories.txt"):
    """
    Traverses the given root directory to find all files with a .py or .ipynb extension.
    Writes to two files:
      - directories.txt: A list of the file paths.
      - code.txt: Each file’s path (as header) followed by its content.
        For .ipynb files, both code and markdown cells are included.
    """
    root = Path(root_directory)
    # Collect both .py and .ipynb files
    files = list(root.rglob("*.py")) + list(root.rglob("*.ipynb"))
    # Optional: sort files for a consistent order
    files.sort(key=lambda p: p.as_posix())

    with open(code_file, "w", encoding="utf-8") as code_out, open(list_file, "w", encoding="utf-8") as list_out:
        for file_path in files:
            # Write the file path to the directories file
            list_out.write(f"{file_path}\n")
            
            # Write the file path header in the code file
            code_out.write(f"# {file_path}\n")
            
            # Process the file according to its extension
            if file_path.suffix == ".ipynb":
                content = extract_content_from_ipynb(file_path)
            else:
                try:
                    content = file_path.read_text(encoding="utf-8")
                except Exception as e:
                    content = f"# Error reading {file_path}: {e}"
            
            code_out.write(content)
            code_out.write("\n\n")  # Add separation for readability

if __name__ == "__main__":
    # Adjust 'root_directory' if your repository root is different.
    export_code_and_directory_list(root_directory=".", code_file="code.txt", list_file="directories.txt")


# utils/__init__.py


# utils/glut_window.py
import OpenGL.GLUT as oglut
import sys
import OpenGL.GL as gl
from abc import ABC, abstractmethod


class GlutWindow(ABC):
    """
    Defines the window using glut and is responsible for
    initialization and drawing.
    """
    def __init__(self, width: int, height: int, *args, **kwargs):
        self.width = width
        self.height = height
        oglut.glutInit(sys.argv)
        oglut.glutInitWindowSize(self.width, self.height)
        self.window = oglut.glutCreateWindow(b"Window")
        oglut.glutDisplayFunc(self.display)
        oglut.glutIdleFunc(self.idle)
        oglut.glutReshapeFunc(self.resize)
        oglut.glutKeyboardFunc(self.on_keyboard)
        oglut.glutSpecialFunc(self.on_special_key)
        oglut.glutMouseFunc(self.on_mouse)
        oglut.glutMotionFunc(self.on_mousemove)
        self.update_if = oglut.glutPostRedisplay
        self.controller = None

    def init_opengl(self):
        gl.glClearColor(0.0, 0.0, 0.4, 0.0)
        gl.glDepthFunc(gl.GL_LESS)
        gl.glEnable(gl.GL_DEPTH_TEST)
        gl.glEnable(gl.GL_CULL_FACE)

    @abstractmethod
    def draw(self):
        """
        The main drawing function. Is called whenever an update occurs.
        Needs to be implemented in the main window class.
        """
        pass

    def display(self):
        self.draw()
        oglut.glutSwapBuffers()

    def idle(self):
        self.update_if()

    @abstractmethod
    def resize(self, width, height):
        pass

    def on_keyboard(self, key, x, y):
        self.controller.on_keyboard(key, x, y)

    def on_special_key(self, key, x, y):
        self.controller.on_special_key(key, x, y)

    def on_mouse(self, *args, **kwargs):
        self.controller.on_mouse(*args, **kwargs)

    def on_mousemove(self, *args, **kwargs):
        self.controller.on_mousemove(*args, **kwargs)

    def run(self):
        oglut.glutMainLoop()


if __name__ == "__main__":
    win = GlutWindow()
    win.run()


# utils/mvp_controller.py
import glm
import math

class MVPController:
    def __init__(self, callback_update, width: int, height: int):
        self.callback_update = callback_update
        self.width = width
        self.height = height
        self.position = glm.vec3(2, 2, 2.5)
        self.pitch = -0.5
        self.yaw = -0.5
        self.roll = 0.0
        self.speed = 0.4
        self.mouse_speed = 0.01
        self.fov = 90
        self.calc_view_projection()
        self.last_x = 0
        self.last_y = 0

    def calc_mvp(self, model_matrix=glm.mat4(1.0)):
        return self.projection_matrix * self.view_matrix * model_matrix

    def calc_view_projection(self):
        self.direction = glm.vec3(
            math.cos(self.yaw) * math.cos(self.pitch),
            math.sin(self.pitch),
            math.sin(self.yaw) * math.cos(self.pitch)
        )
        self.direction = glm.normalize(self.direction)

        self.right = glm.normalize(glm.cross(self.direction, glm.vec3(0, 1, 0)))
        self.up = glm.normalize(glm.cross(self.right, self.direction))

        self.view_matrix = glm.lookAt(self.position, self.position + self.direction, self.up)
        self.projection_matrix = glm.perspective(glm.radians(self.fov), self.width / self.height, 0.1, 1000)

    def on_keyboard(self, key: bytes, x: int, y: int):
        # Movement using WASD keys
        if key == b'w':  # forward
            self.position += self.direction * self.speed
        elif key == b's':  # backward
            self.position -= self.direction * self.speed
        elif key == b'a':  # left
            self.position -= self.right * self.speed
        elif key == b'd':  # right
            self.position += self.right * self.speed

        self.calc_view_projection()
        self.callback_update()

    def on_mouse(self, key: int, up: int, x: int, y: int):
        if key == 0 and up == 0:  # Left mouse button pressed
            self.last_x = x
            self.last_y = y

    def on_mousemove(self, x: int, y: int):
        x_diff = self.last_x - x
        y_diff = self.last_y - y
        self.last_x = x
        self.last_y = y

        self.yaw -= x_diff * self.mouse_speed
        self.pitch -= y_diff * self.mouse_speed

        # Clamp pitch to avoid flipping
        self.pitch = max(-math.pi / 2 + 0.01, min(math.pi / 2 - 0.01, self.pitch))

        self.calc_view_projection()
        self.callback_update()

    def on_special_key(self, *args):
        pass



# utils/mvp_controller_2.py
import glm
import math

class MVPController:
    def __init__(self, callback_update, width: int, height: int):
        self.callback_update = callback_update
        self.width = width
        self.height = height
        self.position = glm.vec3(2, 2, 2.5)
        self.pitch = -0.5
        self.yaw = -0.5
        self.roll = 0.0
        self.speed = 0.4
        self.mouse_speed = 0.01
        self.fov = 90
        self.calc_view_projection()
        self.last_x = 0
        self.last_y = 0

    def calc_mvp(self, model_matrix=glm.mat4(1.0)):
        return self.projection_matrix * self.view_matrix * model_matrix

    def calc_view_projection(self):
        # Calculate direction vector from yaw and pitch
        self.direction = glm.vec3(
            math.cos(self.yaw) * math.cos(self.pitch),
            math.sin(self.pitch),
            math.sin(self.yaw) * math.cos(self.pitch)
        )
        self.direction = glm.normalize(self.direction)

        # Define the right and up vectors
        self.right = glm.normalize(glm.cross(self.direction, glm.vec3(0, 1, 0)))
        self.up = glm.normalize(glm.cross(self.right, self.direction))

        # Create view and projection matrices
        self.view_matrix = glm.lookAt(self.position, self.position + self.direction, self.up)
        self.projection_matrix = glm.perspective(glm.radians(self.fov), self.width / self.height, 0.1, 1000)

    def on_keyboard(self, key: bytes, x: int, y: int):
        # Movement using WASD keys
        if key == b'w':  # forward
            self.position += self.direction * self.speed
        elif key == b's':  # backward
            self.position -= self.direction * self.speed
        elif key == b'a':  # left
            self.position -= self.right * self.speed
        elif key == b'd':  # right
            self.position += self.right * self.speed

        self.calc_view_projection()
        self.callback_update()

    def on_mouse(self, key: int, up: int, x: int, y: int):
        if key == 0 and up == 0:  # Left mouse button pressed
            self.last_x = x
            self.last_y = y

    def on_mousemove(self, x: int, y: int):
        x_diff = self.last_x - x
        y_diff = self.last_y - y
        self.last_x = x
        self.last_y = y

        self.yaw -= x_diff * self.mouse_speed
        self.pitch -= y_diff * self.mouse_speed

        # Clamp pitch to avoid flipping
        self.pitch = max(-math.pi / 2 + 0.01, min(math.pi / 2 - 0.01, self.pitch))

        self.calc_view_projection()
        self.callback_update()

    def on_special_key(self, *args):
        pass


# utils/obj_loader.py
# -------------------------------------------------------------------------------
# Name:        521140S Computer Graphics (2020) Programming Assignment 2
# Purpose:     Utils for external objects loading
# Copyright (C) 2019 Haoyu Chen <chenhaoyucc@icloud.com>,
# author: Chen Haoyu

# center of Machine Vision and Signal Analysis (CMVS),
# Department of Computer Science and Engineering,
# University of Oulu, Oulu, 90570, Finland
# -------------------------------------------------------------------------------
import os


class ObjLoader(object):
    def __init__(self, fname):
        fname = os.path.abspath(
            os.path.join(os.path.join(os.path.dirname(__file__), ".."), fname)
        )
        f = open(fname, "r")  # in text mode

        self.vertexs = []
        self.indices = []
        self.normals = []
        self.texcoords = []

        for line in f:
            if line.startswith("#"):
                continue
            items = line.split()

            if items[0] == "v":
                v = map(float, items[1:4])
                self.vertexs.extend(v)
            elif items[0] == "vn":
                v = map(float, items[1:4])
                self.normals.extend(v)
            elif items[0] == "vt":
                v = map(float, items[1:3])
                self.texcoords.extend(v)
            elif items[0] == "f":
                index = map(int, items[1].split("/"))
                self.indices.extend(index)
                index = map(int, items[2].split("/"))
                self.indices.extend(index)
                index = map(int, items[3].split("/"))
                self.indices.extend(index)
            elif items[0] == "s":
                self.smooth = items[1]
            elif items[0] == "mtllib":
                self.referenceMaterials = items[1]
            elif items[0] == "usemtl":
                self.Materials = items[1]
            else:
                print("skip unknown line : %s", line[0:-1])

    def to_array_style(self):
        class Container(object):
            pass

        outobj = Container()
        outobj.vertexs = []
        outobj.texcoords = []
        outobj.normals = []

        for i in range(0, len(self.indices), 3):
            index = 3 * (self.indices[i] - 1)
            outobj.vertexs.extend(self.vertexs[index : index + 3])
            index = 2 * (self.indices[i + 1] - 1)
            outobj.texcoords.extend(self.texcoords[index : index + 2])
            index = 3 * (self.indices[i + 2] - 1)
            outobj.normals.extend(self.normals[index : index + 3])

        return outobj

    def to_single_index_style(self):
        class Container(object):
            pass

        outobj = Container()
        outobj.vertexs = []
        outobj.texcoords = []
        outobj.normals = []
        outobj.indices = []
        combinations = []
        for i in range(0, len(self.indices), 3):
            point = self.indices[i : i + 3]
            if point in combinations:
                pass
            else:
                combinations.append(point)
                index = 3 * (self.indices[i] - 1)
                outobj.vertexs.extend(self.vertexs[index : index + 3])
                index = 2 * (self.indices[i + 1] - 1)
                outobj.texcoords.extend(self.texcoords[index : index + 2])
                index = 3 * (self.indices[i + 2] - 1)
                outobj.normals.extend(self.normals[index : index + 3])
            newindex = combinations.index(point)
            outobj.indices.append(newindex)
        return outobj


# utils/texture_loader.py
# -------------------------------------------------------------------------------
# Name:        521140S Computer Graphics (2020) Programming Assignment 2
# Purpose:     Utils for texture loading
# Copyright (C) 2019 Haoyu Chen <chenhaoyucc@icloud.com>,
# author: Chen Haoyu

# center of Machine Vision and Signal Analysis (CMVS),
# Department of Computer Science and Engineering,
# University of Oulu, Oulu, 90570, Finland
# -------------------------------------------------------------------------------


import os
import struct

from OpenGL.GL import *
from OpenGL.GL.EXT import texture_compression_s3tc
from OpenGL.raw import GL
from PIL import Image


class TextureLoader(object):
    def loadDDS(self, fname):

        f = open(fname, "rb")
        ddstag = f.read(4)
        if ddstag != "DDS ":
            raise Exception("invp'yild dds file")
        head = f.read(124)
        (height,) = self.height = struct.unpack("I", head[8:12])
        (width,) = self.width = struct.unpack("I", head[12:16])
        (linearSize,) = struct.unpack("I", head[16:20])
        (mipMapCount,) = struct.unpack("I", head[24:28])
        fourCC = head[80:84]
        supported_DDS = ["DXT1", "DXT3", "DXT5"]

        if not (fourCC in supported_DDS):
            raise Exception("Not supported DDS file: %s" % fourCC)

        self.format = fourCC

        # print "fourCC",fourCC
        if fourCC == "DXT1":
            components = 3
            blockSize = 8
        else:
            components = 4
            blockSize = 16

        if fourCC == "DXT1":
            format = texture_compression_s3tc.GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
        elif fourCC == "DXT3":
            format = texture_compression_s3tc.GL_COMPRESSED_RGBA_S3TC_DXT3_EXT
        elif fourCC == "DXT5":
            format = texture_compression_s3tc.GL_COMPRESSED_RGBA_S3TC_DXT5_EXT

        if mipMapCount > 1:
            bufferSize = linearSize * 2
        else:
            bufferSize = linearSize
        # print bufferSize
        ddsbuffer = f.read(bufferSize)
        offset = 0
        self.textureGLID = glGenTextures(1)
        glBindTexture(GL_TEXTURE_2D, self.textureGLID)

        for level in range(0, mipMapCount):
            size = ((width + 3) / 4) * ((height + 3) / 4) * blockSize
            glCompressedTexImage2D(
                GL_TEXTURE_2D,
                level,
                format,
                width,
                height,
                0,
                size,
                ddsbuffer[offset : offset + size],
            )
            offset += size
            width /= 2
            height /= 2
            if width == 0 | height == 0:
                break
        self.inversedVCoords = True
        f.close()

    def loadByPIL(self, fname, mode):
        image = Image.open(fname)
        converted = image.convert(mode)
        self.buffer = converted.transpose(Image.FLIP_TOP_BOTTOM).tobytes()
        self.height = image.height
        self.width = image.width
        self.format = mode
        len(self.buffer) / (image.width * image.height)
        image.close()
        self.textureGLID = glGenTextures(1)
        glBindTexture(GL_TEXTURE_2D, self.textureGLID)
        glTexImage2D(
            GL_TEXTURE_2D,
            0,
            GL_RGB,
            self.width,
            self.height,
            0,
            GL_RGB,
            GL_UNSIGNED_BYTE,
            self.buffer,
        )

        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT)
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT)
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR)
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR)
        glGenerateMipmap(GL_TEXTURE_2D)

    def __init__(self, fname, mode="RGB"):
        self.inversedVCoords = False
        fname = os.path.abspath(
            os.path.join(os.path.join(os.path.dirname(__file__), ".."), fname)
        )
        if fname.lower().endswith(".dds"):
            self.loadDDS(fname)
        else:
            self.loadByPIL(fname, mode)

    def __len__(self):
        return len(self.buffer)


